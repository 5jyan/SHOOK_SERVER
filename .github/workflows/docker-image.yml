# .github/workflows/deploy.yml
name: Build and Deploy with Docker Compose

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  IMAGE_NAME: ${{ secrets.DOCKER_HUB_USERNAME }}/shook
  DEPLOY_PATH: /home/${{ secrets.EC2_USERNAME }}/shook-deploy

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: true
        tags: |
          ${{ env.IMAGE_NAME }}:latest
          ${{ env.IMAGE_NAME }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          VITE_GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to EC2
        uses: easingthemes/ssh-deploy@main
        with:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
          ARGS: "-rlgoDzvc -i --delete"
          SOURCE: "docker-compose.yml"
          REMOTE_HOST: ${{ secrets.EC2_HOST }}
          REMOTE_USER: ${{ secrets.EC2_USERNAME }}
          TARGET: ${{ env.DEPLOY_PATH }}
          SCRIPT_AFTER: |
            echo "üöÄ Starting deployment process..."
            
            cd ${{ env.DEPLOY_PATH }} || { 
              echo "ERROR: Failed to change to deployment directory"; 
              exit 1; 
            }
            
            # ÌôòÍ≤ΩÎ≥ÄÏàò ÌååÏùº ÏÉùÏÑ±
            echo "üìù Creating environment file..."
            cat > .env << EOF || { echo "ERROR: Failed to write to .env file. Check permissions for ${{ env.DEPLOY_PATH }} or disk space."; exit 1; }
            SESSION_SECRET=${{ secrets.SESSION_SECRET }}
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            YOUTUBE_API_KEY=${{ secrets.YOUTUBE_API_KEY }}
            OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
            GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
            SUPADATA_API_KEY=${{ secrets.SUPADATA_API_KEY }}
            SLACK_BOT_TOKEN=${{ secrets.SLACK_BOT_TOKEN }}
            SLACK_CHANNEL_ID=${{ secrets.SLACK_CHANNEL_ID }}
            EOF
            
            # Docker Î°úÍ∑∏Ïù∏
            echo "üîê Logging into Docker Hub..."
            echo ${{ secrets.DOCKER_HUB_TOKEN }} | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin || { 
              echo "ERROR: Docker login failed"; 
              exit 1; 
            }
            
            # docker-compose.yml Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨
            echo "üîç Validating docker-compose configuration..."
            docker compose config --quiet || { 
              echo "ERROR: Invalid docker-compose.yml syntax"; 
              exit 1; 
            }
            
            # ÏµúÏã† Ïù¥ÎØ∏ÏßÄ ÌíÄ
            echo "üì• Pulling latest images..."
            docker compose pull || { 
              echo "ERROR: Failed to pull Docker images"; 
              exit 1; 
            }
            
            # Í∏∞Ï°¥ ÏÑúÎπÑÏä§ Ï§ëÏßÄ
            echo "‚èπÔ∏è Stopping existing services..."
            docker compose down --remove-orphans 2>/dev/null || true
            
            # ÏÉà ÏÑúÎπÑÏä§ ÏãúÏûë
            echo "‚ñ∂Ô∏è Starting services..."
            docker compose up -d || { 
              echo "ERROR: Failed to start services"; 
              docker compose logs --tail 50;
              exit 1; 
            }
            
            # ÏÑúÎπÑÏä§ ÏãúÏûë ÎåÄÍ∏∞
            echo "‚è≥ Waiting for services to initialize..."
            sleep 20
            
            # Ïª®ÌÖåÏù¥ÎÑà ÏÉÅÌÉú ÌôïÏù∏
            echo "‚úÖ Checking service status..."
            docker compose ps --format "table {{.Service}}\t{{.Status}}\t{{.Ports}}"
            
            # Ìó¨Ïä§Ï≤¥ÌÅ¨ ÏàòÌñâ
            echo "üîç Performing health check..."
            HEALTH_CHECK_PASSED=false
            for i in {1..12}; do
            if curl -sf http://localhost/health >/dev/null 2>&1; then
                echo "‚úÖ Application is healthy!"
                HEALTH_CHECK_PASSED=true
                break
              else
                echo "‚è≥ Health check attempt $i/12..."
                sleep 5
              fi
            done
            
            if [ "$HEALTH_CHECK_PASSED" = false ]; then
              echo "‚ùå Health check failed after 12 attempts"
              echo "üìã Application logs:"
              docker compose logs --tail 30 app
              exit 1
            fi
            
            # ÏÇ¨Ïö©ÌïòÏßÄ ÏïäÎäî Ïù¥ÎØ∏ÏßÄ Ï†ïÎ¶¨
            echo "üßπ Cleaning up unused images..."
            docker image prune -f >/dev/null 2>&1 || true
            
            echo "üéâ Deployment completed successfully!"

  notify:
    needs: [build, deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify deployment result
      run: |
        BUILD_STATUS="${{ needs.build.result }}"
        DEPLOY_STATUS="${{ needs.deploy.result }}"
        
        echo "üìä Deployment Summary:"
        echo "Build: $BUILD_STATUS"
        echo "Deploy: $DEPLOY_STATUS"
        
        if [ "$BUILD_STATUS" == "success" ] && [ "$DEPLOY_STATUS" == "success" ]; then
          echo "‚úÖ All deployment stages completed successfully"
        else
          echo "‚ùå Deployment failed - Check logs for details"
          exit 1
        fi